using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LoggingService.Models
{
    public class ClientData
    {
        public ClientData()
        {

        }
        public ClientData(int id)
        {
            this.Id = id;
        }
        public ClientData(string src)
        {
            this.SourceData = src;
        }
        public ClientData(string srcData, string msgOut, string detail)
        {
            this.SourceData = srcData;
            this.MessageOutput = msgOut;
            this.Details = detail;
            if (!IsValid)
            {
                throw new InvalidOperationException("Not all parameters are valid");
            }
        }
        public ClientData(string srcData, string msgOut, string detail, DateTime datetime)
        {
            this.SourceData = srcData;
            this.MessageOutput = msgOut;
            this.Details = detail;
            this.CreatedDateEst = datetime;
            if (!IsValid)
            {
                throw new InvalidOperationException("Not all parameters are valid");
            }
        }
        public ClientData(int id, string srcData, string msgOut, string detail)
        {
            this.Id = id;
            this.SourceData = srcData;
            this.MessageOutput = msgOut;
            this.Details = detail;
            if (!IsValid)
            {
                throw new InvalidOperationException("Not all parameters are valid");
            }
        }
        public ClientData(int id, string srcData, string msgOut, string detail, DateTime datetime)
        {
            this.Id = id;
            this.SourceData = srcData;
            this.MessageOutput = msgOut;
            this.Details = detail;
            this.CreatedDateEst = datetime;
            if (!IsValid)
            {
                throw new InvalidOperationException("Not all parameters are valid");
            }
        }
        [JsonIgnore]
        public bool IsValid
        {
            get
            {
                return !(string.IsNullOrEmpty(SourceData)
                    || string.IsNullOrWhiteSpace(SourceData)
                    || string.IsNullOrEmpty(MessageOutput)
                    || string.IsNullOrWhiteSpace(MessageOutput)
                    || string.IsNullOrEmpty(Details)
                    || string.IsNullOrWhiteSpace(Details));
            }
        }

        public int Id { get; set; }
        public string SourceData { get; set; }
        public string MessageOutput { get; set; }
        public string Details { get; set; }
        public DateTime CreatedDateEst {get; set; }
    }
}
